#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Peach Spell Card 2"]
#Text["TESTING SPELL PATTERN 2"]
#Background["script/Peach/Peach Background.txt"]

#include "./[library] boss.txt"
#include "../ZUNShot/ZUNShot_Const.txt"

let isLeft = true; // returns true if peach is facing left

let atk1SE = scriptDir ~ "se_kira00.wav";
let atk2SE = scriptDir ~ "se_tan01.wav";
let charge1SE = scriptDir ~ "se_ch02.wav";
let charge2SE = scriptDir ~ "se_ch00.wav";

let count = 0;
let limit = 5;

@Initialize {
	bossObj = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(bossObj);
	ObjMove_SetDestAtFrame(bossObj, GetStgFrameWidth() - 9, 70, 60);
	
	TRenderBoss;
	TCutIn("Royal Sign \"High Royalty\"");
	TFiringLoop;
	TMovement;
	TEnd;
}

@Loading {
	LoadSound(atk1SE);
	LoadSound(atk2SE);
	LoadSound(charge1SE);
	LoadSound(charge2SE);
}

@Event {
	alternative(GetEventType())
	case (EV_REQUEST_LIFE()) {
		SetScriptResult(2000);
	}
	
	case (EV_REQUEST_TIMER()) {
		SetScriptResult(60);
	}
	
	case (EV_REQUEST_SPELL_SCORE()) {
		SetScriptResult(3000000);
	}
}

@Finalize {
	RemoveSound(atk1SE);
	RemoveSound(atk2SE);
	RemoveSound(charge1SE);
	RemoveSound(charge2SE);
}

// ===== Functions =====

// ===== Tasks =====

task TMovement {
	wait(120);
	while (!Obj_IsDeleted(bossObj)) {
		if (count < limit) {
			if (bossX <= 10 && isLeft) { 
				isLeft = false; 
				count++;
			}
			else if (bossX >= GetStgFrameWidth() - 10 && !isLeft) { 
				isLeft = true; 
				count++;
			}
			
			if (isLeft) { ObjMove_SetDestAtSpeed(bossObj, 10, 70, 2.75); }
			else { ObjMove_SetDestAtSpeed(bossObj, GetStgFrameWidth() - 10, 70, 2.75); }
		}
		
		else if (count >= limit) {
			ObjMove_SetDestAtSpeed(bossObj, GetStgFrameWidth() / 2, 110, 6);
		}
		yield;
	}
}

task TFiringLoop {
	let arr = [270, 283, 281, 278, 274, 273]; // Calls Murasa bullet colors R-O-Y-G-B-V
	let i = 0;
	
	wait(130);
	while(!Obj_IsDeleted(bossObj)) {
		if (count < limit) {
			if (i < length(arr)) { 
				TSlowAccelFire(90, 120, arr[i]);
				TSlowAccelFire(270, 120, arr[i]);
				PlaySE(atk1SE);
				i++; 
			}
			else { 
				i = 0; 
				TSlowAccelFire(90, 120, arr[i]);
				TSlowAccelFire(270, 120, arr[i]);
				PlaySE(atk1SE);
			}
			wait(3);
		}
		
		else if (count >= limit) {
			wait (60);
			PlaySE(charge1SE);
			wait(60);
			loop(5) {
				TAngledRingFire(0, 0.5, 2.75, 384, true);
				PlaySE(atk2SE);
				wait(20);
				TAngledRingFire(90, -0.5, 2.75, 386, false);
				PlaySE(atk2SE);
				wait(20);
			}
			PlaySE(charge2SE);
			wait(90);
			count = 0;
		}
		yield;
	}
}

task TAngledRingFire (angle, angleV, maxSpeed, id, isPos) {
	let obj;
	loop (15) {
		if (isPos) { obj = CreateShotA2(bossX + cos(angle), bossY + sin(angle), 1, angle, 0.1, maxSpeed, id, 3); }
		else { obj = CreateShotA2(bossX + cos(angle), bossY + sin(angle), 1, -angle, 0.1, maxSpeed, id, 3); }
		ObjMove_SetAngularVelocity(obj, angleV);
		
		angle += 360/15;
	}
}

task TSlowAccelFire (angle, frameDelay, id) {
	let obj = CreateShotA1(rand(bossX - 10, bossX + 10), bossY + 20, 0.2, angle, id, 2);
	ObjMove_AddPatternA2(obj, frameDelay, NO_CHANGE, NO_CHANGE, 0.05, 0, 10);
}